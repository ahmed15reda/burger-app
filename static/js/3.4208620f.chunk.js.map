{"version":3,"sources":["components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js","components/UI/Input/Input.js"],"names":["checkoutSummary","props","className","style","width","margin","Burger","ingredients","Button","btnType","clicked","checkoutCancelled","checkoutContinued","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","street","zipCode","minLength","maxLength","isNumeric","country","email","isEmail","deliveryMethod","options","displayValue","formIsValid","orderHandler","event","preventDefault","formData","formElementId","order","ings","price","orderData","userId","onOrderBurger","token","inputId","updatedFormElement","updateObject","this","target","checkValidity","updatedOrderForm","setState","formElementsArray","key","push","id","config","form","onSubmit","map","formElement","Input","invalid","shouldValidate","changed","inputChangedHandler","disabled","loading","Spinner","Component","connect","burgerBuilder","totalPrice","auth","dispatch","actions","withErrorHandler","axios","Checkout","checkoutCancelledHandler","history","goBack","checkoutContinuedHandler","replace","summary","to","purchasedRedirect","purchased","path","match","url","component","input","inputElement","inputClasses","join","onChange","option","label"],"mappings":"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","file":"static/js/3.4208620f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport Burger from '../../Burger/Burger';\r\nimport Button from '../../UI/Button/Button';\r\nimport './CheckoutSummary.css';\r\n\r\nconst checkoutSummary = (props) => {\r\n    return (\r\n        <div className=\"CheckoutSummary\">\r\n            <h1>We hope it tastes well!</h1>\r\n            <div style={{width:'100%', margin:'auto'}}>\r\n                <Burger ingredients={props.ingredients}/>\r\n            </div>\r\n            <Button \r\n                btnType=\"Danger\"\r\n                clicked={props.checkoutCancelled}>CANCEL</Button>\r\n            <Button \r\n                btnType=\"Success\"\r\n                clicked={props.checkoutContinued}>CONTINUE</Button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default checkoutSummary;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport Button from '../../../components/UI/Button/Button';\r\nimport Spinner from '../../../components/UI/Spinner/Spinner';\r\nimport axios from '../../../axios-orders';\r\nimport Input from '../../../components/UI/Input/Input';\r\nimport './ContactData.css';\r\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler';\r\nimport * as actions from '../../../store/actions/index';\r\nimport { updateObject, checkValidity } from '../../../shared/utility';\r\n\r\nclass ContactData extends Component {\r\n\r\n    state = {\r\n        orderForm: {\r\n            name: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Your Name'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            street: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Street'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            zipCode: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'ZIP Code'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 5,\r\n                    maxLength: 5,\r\n                    isNumeric: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            country: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Country'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            email: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'email',\r\n                    placeholder: 'Your E-Mail'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    isEmail: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            deliveryMethod: {\r\n                elementType: 'select',\r\n                elementConfig: {\r\n                    options: [\r\n                        { value: 'fastest', displayValue: 'Fastest' },\r\n                        { value: 'cheapest', displayValue: 'Cheapest' }\r\n                    ]\r\n                },\r\n                value: 'fastest',\r\n                validation: {},\r\n                valid: true\r\n            }\r\n        },\r\n        formIsValid: false\r\n    }\r\n\r\n    orderHandler = (event) => {\r\n        event.preventDefault()\r\n        const formData = {};\r\n        for (let formElementId in this.state.orderForm) {\r\n            formData[formElementId] = this.state.orderForm[formElementId].value\r\n        }\r\n        const order = {\r\n            ingredients: this.props.ings,\r\n            price: this.props.price,\r\n            orderData: formData,\r\n            userId : this.props.userId,\r\n            validation: {\r\n                required: true\r\n            }\r\n        }\r\n\r\n        this.props.onOrderBurger(order, this.props.token);\r\n\r\n    }\r\n\r\n    inputChangedHandler(event, inputId) {\r\n        const updatedFormElement = updateObject(this.state.orderForm[inputId], {\r\n            value: event.target.value,\r\n            valid: checkValidity(event.target.value, this.state.orderForm[inputId].validation),\r\n            touched: true\r\n        });\r\n\r\n        const updatedOrderForm = updateObject(this.state.orderForm, {\r\n            [inputId]: updatedFormElement\r\n        });\r\n        \r\n        let formIsValid = true;\r\n        for (let inputId in updatedOrderForm) {\r\n            formIsValid = updatedOrderForm[inputId].value && formIsValid\r\n        }\r\n\r\n        this.setState({ orderForm: updatedOrderForm, formIsValid: formIsValid })\r\n    }\r\n\r\n    render() {\r\n        const formElementsArray = [];\r\n        for (let key in this.state.orderForm) {\r\n            formElementsArray.push({\r\n                id: key,\r\n                config: this.state.orderForm[key]\r\n            });\r\n        }\r\n        let form = (\r\n            <form onSubmit={this.orderHandler}>\r\n                {formElementsArray.map(formElement => (\r\n                    <Input\r\n                        key={formElement.id}\r\n                        elementType={formElement.config.elementType}\r\n                        elementConfig={formElement.config.elementConfig}\r\n                        value={formElement.config.value}\r\n                        invalid={!formElement.config.valid}\r\n                        shouldValidate={formElement.config.validation}\r\n                        touched={formElement.config.touched}\r\n                        changed={(event) => this.inputChangedHandler(event, formElement.id)} />\r\n                ))}\r\n                <Button\r\n                    btnType=\"Success\"\r\n                    clicked={this.orderHandler}\r\n                    disabled={!this.state.formIsValid}>ORDER</Button>\r\n            </form>\r\n        );\r\n\r\n        if (this.props.loading) {\r\n            form = <Spinner />\r\n        }\r\n        return (\r\n            <div className=\"ContactData\">\r\n                <h4>Enter your Contact Data</h4>\r\n                {form}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        ings: state.burgerBuilder.ingredients,\r\n        price: state.burgerBuilder.totalPrice,\r\n        loading: state.order.loading,\r\n        token: state.auth.token,\r\n        userId: state.auth.userId\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onOrderBurger: (orderData,token) => dispatch(actions.purchaseBurger(orderData,token))\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios));","import React, { Component } from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\nimport CheckoutSummary from '../../components/Order/CheckoutSummary/CheckoutSummary';\r\nimport ContactData from './ContactData/ContactData';\r\n\r\n\r\nclass Checkout extends Component {\r\n\r\n    checkoutCancelledHandler = () => {\r\n        this.props.history.goBack();\r\n    }\r\n\r\n    checkoutContinuedHandler = () => {\r\n        this.props.history.replace('/checkout/contact-data');\r\n    }\r\n\r\n    render() {\r\n        let summary = <Redirect to=\"/\" />\r\n        if (this.props.ings) {\r\n            const purchasedRedirect = this.props.purchased ? <Redirect to=\"/\" /> : null;\r\n            summary = (\r\n                <div>\r\n                    {purchasedRedirect}\r\n                    <CheckoutSummary\r\n                        ingredients={this.props.ings}\r\n                        checkoutCancelled={this.checkoutCancelledHandler}\r\n                        checkoutContinued={this.checkoutContinuedHandler} />\r\n                    <Route\r\n                        path={this.props.match.url + '/contact-data'}\r\n                        component={ContactData} />\r\n                </div>\r\n            );\r\n        }\r\n        return summary;\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        ings: state.burgerBuilder.ingredients,\r\n        purchased: state.order.purchased\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Checkout);","import React from 'react';\r\n\r\nimport './Input.css';\r\n\r\nconst input = (props) => {\r\n    let inputElement = null;\r\n    const inputClasses = ['InputElement'];\r\n\r\n    if(props.invalid && props.shouldValidate && props.touched){\r\n        inputClasses.push('Invalid')\r\n    }\r\n\r\n    switch (props.elementType) {\r\n        case ('input'):\r\n            inputElement = <input\r\n                className= {inputClasses.join(' ')}\r\n                {...props.elementConfig}\r\n                value={props.value} \r\n                onChange={props.changed}/>;\r\n            break;\r\n        case ('textarea'):\r\n            inputElement = <textarea\r\n                className= {inputClasses.join(' ')}\r\n                {...props.elementConfig}\r\n                value={props.value} \r\n                onChange={props.changed}/>;\r\n            break;\r\n        case ('select'):\r\n            inputElement = (\r\n                <select\r\n                    className= {inputClasses.join(' ')}\r\n                    value={props.value}\r\n                    onChange={props.changed}>\r\n                    {props.elementConfig.options.map(option => (\r\n                        <option key={option.value} value={option.value}>\r\n                            {option.displayValue}\r\n                        </option>\r\n                    ))}\r\n                </select>\r\n            );\r\n            break;\r\n        default:\r\n            inputElement = <input\r\n                className= {inputClasses.join(' ')}\r\n                {...props.elementConfig}\r\n                value={props.value} \r\n                onChange={props.changed}/>\r\n\r\n    }\r\n    return (\r\n        <div className=\"Input\">\r\n            <label className=\"Label\">{props.label}</label>\r\n            {inputElement}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default input;"],"sourceRoot":""}